/**
 * 
 */
package org.inria.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;

import org.inria.database.DBStatement;
import org.inria.database.DBEngine;

/**
 * <P>
 * A Statement object is used for executing a static SQL statement and obtaining
 * the results produced by it.
 * 
 * <P>
 * Only one ResultSet per Statement can be open at any point in time. Therefore,
 * if the reading of one ResultSet is interleaved with the reading of another,
 * each must have been generated by different Statements. All statement execute
 * methods implicitly close a statment's current ResultSet if an open one
 * exists.
 * 
 * @see Connection#createStatement
 * @see ResultSet
 * 
 * @author Alexei Troussov
 */
public class Statement extends DBStatement implements java.sql.Statement
{
	@SuppressWarnings( "unused" )
	private final String TAG = Statement.class.getSimpleName();

	public static final String EP_START = "/*EP ";
	public static final String EP_STOP = " \u0000*/";

	Statement( DBEngine storage )
	{
		super( storage );
	}
	
	public ResultSet executeQuery( int qepNo ) throws SQLException
	{
		ep_static = Integer.toString( qepNo );
		return query();
	}
	
	public int executeUpdate( int qepNo ) throws SQLException
	{
		ep_static = Integer.toString( qepNo );
		return update( Statement.NO_GENERATED_KEYS );
	}
	
	public int executeUpdate( int qepNo, int autoGeneratedKeys ) throws SQLException
	{
		ep_static = Integer.toString( qepNo );
		return update( autoGeneratedKeys );
	}

	/*
	 * @see java.sql.Statement#executeQuery(java.lang.String)
	 */
	@Override
	public ResultSet executeQuery( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String)
	 */
	@Override
	public int executeUpdate( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int)
	 */
	@Override
	public int executeUpdate( String sql, int autoGeneratedKeys ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#close()
	 */
	@Override
	public void close() throws SQLException
	{
		if ( res != null ) // close result set
			res.close();
		// mDB.unlockedReent();
	}

	// ////////////////////////////////////////////////////////
	// / Not implemented methods
	// ////////////////////////////////////////////////////////

	// /
	// / interface java.sql.Wrapper
	// /

	/*
	 * @see java.sql.Wrapper#unwrap(java.lang.Class)
	 */
	@Override
	public <T> T unwrap( Class<T> iface ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)
	 */
	@Override
	public boolean isWrapperFor( Class<?> iface ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	// /
	// / interface java.sql.Statement
	// /

	/*
	 * @see java.sql.Statement#addBatch(java.lang.String)
	 */
	@Override
	public void addBatch( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#cancel()
	 */
	@Override
	public void cancel() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#clearBatch()
	 */
	@Override
	public void clearBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#clearWarnings()
	 */
	@Override
	public void clearWarnings() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String)
	 */
	@Override
	public boolean execute( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, int)
	 */
	@Override
	public boolean execute( String sql, int autoGeneratedKeys ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, int[])
	 */
	@Override
	public boolean execute( String sql, int[] columnIndexes ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
	 */
	@Override
	public boolean execute( String sql, String[] columnNames ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeBatch()
	 */
	@Override
	public int[] executeBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
	 */
	@Override
	public int executeUpdate( String sql, int[] columnIndexes ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String,
	 * java.lang.String[])
	 */
	@Override
	public int executeUpdate( String sql, String[] columnNames ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getConnection()
	 */
	@Override
	public Connection getConnection() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getFetchDirection()
	 */
	@Override
	public int getFetchDirection() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getFetchSize()
	 */
	@Override
	public int getFetchSize() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMaxFieldSize()
	 */
	@Override
	public int getMaxFieldSize() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMaxRows()
	 */
	@Override
	public int getMaxRows() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMoreResults()
	 */
	@Override
	public boolean getMoreResults() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMoreResults(int)
	 */
	@Override
	public boolean getMoreResults( int current ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getQueryTimeout()
	 */
	@Override
	public int getQueryTimeout() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSet()
	 */
	@Override
	public ResultSet getResultSet() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetConcurrency()
	 */
	@Override
	public int getResultSetConcurrency() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetHoldability()
	 */
	@Override
	public int getResultSetHoldability() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetType()
	 */
	@Override
	public int getResultSetType() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getUpdateCount()
	 */
	@Override
	public int getUpdateCount() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getWarnings()
	 */
	@Override
	public SQLWarning getWarnings() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setCursorName(java.lang.String)
	 */
	@Override
	public void setCursorName( String name ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setEscapeProcessing(boolean)
	 */
	@Override
	public void setEscapeProcessing( boolean enable ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setFetchDirection(int)
	 */
	@Override
	public void setFetchDirection( int direction ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setFetchSize(int)
	 */
	@Override
	public void setFetchSize( int rows ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setMaxFieldSize(int)
	 */
	@Override
	public void setMaxFieldSize( int max ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setMaxRows(int)
	 */
	@Override
	public void setMaxRows( int max ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setQueryTimeout(int)
	 */
	@Override
	public void setQueryTimeout( int seconds ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#isClosed()
	 */
	@Override
	public boolean isClosed() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setPoolable(boolean)
	 */
	@Override
	public void setPoolable( boolean poolable ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#isPoolable()
	 */
	@Override
	public boolean isPoolable() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}
}
