/**
 * 
 */
package org.inria.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import org.inria.database.DBEngine;
import org.inria.database.QEPng;
import org.inria.database.Tools;

/**
 * @author Alexei Troussov
 */
public class PreparedStatement extends Statement implements java.sql.PreparedStatement
{
	@SuppressWarnings( "unused" )
	private final String TAG = PreparedStatement.class.getSimpleName();

	private static final int MAX_STRING_SIZE = 410; // maximum string length for setString()

	private int autoGeneratedKeys;	// saved from constructor to be used in executeUpdate()
	private Object[] ep_params_objs;// query parameters array

	@Override
	protected void prepareEP()
	{
		if ( ep_params_count == 0 ) return;
		int pos = ep_params_real_size;
		Object o;
		byte[] ba;
		boolean var_size; // true if size of parameter is variable and
		// must be specified in the first two bytes of parameter buffer
		for ( int i = 0; i < ep_params_count; ++i )
		{
			var_size = true;
			o = ep_params_objs[ i ];
			if ( o != null )
			{
				if ( o instanceof String )
					ba = ( (String) o ).getBytes();
				else if ( o instanceof org.inria.jdbc.Blob.BlobId )
				{
					var_size = false;
					ba = ( (org.inria.jdbc.Blob.BlobId) o ).id;
				}
				else
					ba = (byte[]) o; // instance of byte[]
				if ( var_size )
				{
					Tools.short2bytea( (short) ba.length, plan_params, pos );
					System.arraycopy( ba, 0, plan_params, pos + Tools.T_SIZESHORT, ba.length );
				}
				else
					System.arraycopy( ba, 0, plan_params, pos, ba.length );
				Tools.int2bytea( pos, plan_params, i * EP_PARAMS_DEF_SIZE + 1 );
				pos += ba.length + ( var_size ? Tools.T_SIZESHORT : 0 );
			}
		}
		ep_params_real_size = pos;
	}
	
	PreparedStatement( DBEngine storage, int qepNo, int autoGenKeys ) throws SQLException
	{
		super( storage );
		autoGeneratedKeys = autoGenKeys;
		ep_static = Integer.toString( qepNo );
		ep_params_count = QEPng.getParamCnt( qepNo );
		ep_params_real_size = ep_params_count * EP_PARAMS_DEF_SIZE;
		ep_params_objs = ( ep_params_count > 0 ) ? new Object[ ep_params_count ] : null;
	}

	/*
	 * @see java.sql.PreparedStatement#executeQuery()
	 */
	@Override
	public ResultSet executeQuery() throws SQLException
	{	// change method visibility...
		return super.query();
	}

	/*
	 * @see java.sql.PreparedStatement#executeUpdate()
	 */
	@Override
	public int executeUpdate() throws SQLException
	{
		return super.update( autoGeneratedKeys );
	}

	/*
	 * @see java.sql.PreparedStatement#setString(int, java.lang.String)
	 */
	@Override
	public void setString( int parameterIndex, String theString ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( theString == null )
			plan_params[ index ] = Tools.NULL_CHAR;
		else
		{
			plan_params[ index ] = Tools.T_CHAR;
			if ( theString.length() > MAX_STRING_SIZE )
			{
				theString = theString.substring( 0, MAX_STRING_SIZE );	// Truncate param...
				throw new SQLException( "String parameter is too long" );
			}
			ep_params_objs[ parameterIndex - 1 ] = theString;
		}
	}

	/*
	 * @see java.sql.PreparedStatement#setBytes(int, byte[])
	 */
	@Override
	public void setBytes( int parameterIndex, byte[] theBytes ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( theBytes == null )
			plan_params[ index ] = Tools.NULL_BINARY;
		else
		{
			plan_params[ index ] = Tools.T_BINARY;
			ep_params_objs[ parameterIndex - 1 ] = theBytes;
		}
	}

	/*
	 * @see java.sql.PreparedStatement#setDate(int, java.sql.Date)
	 */
	@Override
	public void setDate( int parameterIndex, Date theDate ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( theDate == null )
		{
			plan_params[ index ] = Tools.NULL_DATE;
			return;
		}
		plan_params[ index ] = Tools.T_DATE;
		// transform x from Date to Calendar
		Calendar cal = Calendar.getInstance();
		cal.setTime( theDate );
		// get the year (2 bytes) and put it in to the byte array
		Tools.short2bytea( (short) ( cal.get( Calendar.YEAR ) ), plan_params, index + 1 );
		// get the month (1 byte) and put it in to the byte array
		plan_params[ index + 3 ] = (byte) ( cal.get( Calendar.MONTH ) + 1 );
		// get the day (1 byte) and put it in to the byte array
		plan_params[ index + 4 ] = (byte) ( cal.get( Calendar.DAY_OF_MONTH ) );
	}

	/**
	 * Proprietary method to speed-up....
	 * FIXME: remove that! It's too ugly :-(
	 * Used in DBMS/src/com/gemalto/dmsp/DBUtil.java
	 */
	public void setRawDate( int parameterIndex, String s ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( s == null )
			plan_params[ index ] = Tools.NULL_DATE;
		else
		{
			plan_params[ index ] = Tools.T_DATE;
			int firstDash = s.indexOf( '-' );
			int secondDash = s.indexOf( '-', firstDash + 1 );
			if ( firstDash > 0 && secondDash > 0 && secondDash < s.length() - 1 )
			{
				Tools.short2bytea( (short) Integer.parseInt( s.substring( 0, firstDash ) ), plan_params, index + 1 );
				plan_params[ index + 3 ] = (byte) Integer.parseInt( s.substring( firstDash + 1, secondDash ) );
				plan_params[ index + 4 ] = (byte) Integer.parseInt( s.substring( secondDash + 1 ) );
			}
			else
				throw new SQLException( "Invalid raw date" );
		}
	}

	/*
	 * @see java.sql.PreparedStatement#setInt(int, int)
	 */
	@Override
	public void setInt( int parameterIndex, int theInt ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		plan_params[ index ] = Tools.T_NUMBER;
		Tools.int2bytea( theInt, plan_params, index + 1 );
	}

	/*
	 * @see java.sql.PreparedStatement#setNull(int, int)
	 */
	@Override
	public void setNull( int parameterIndex, int sqlType ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		switch ( sqlType )
		{
		case java.sql.Types.CHAR:		plan_params[ index ] = Tools.NULL_CHAR;		break;
		case java.sql.Types.DATE:		plan_params[ index ] = Tools.NULL_DATE;		break;
		case java.sql.Types.INTEGER:	plan_params[ index ] = Tools.NULL_NUMBER;	break;
		case java.sql.Types.BINARY:		plan_params[ index ] = Tools.NULL_BINARY;	break;
		case java.sql.Types.BLOB:		plan_params[ index ] = Tools.NULL_BLOB;		break;
		case java.sql.Types.VARCHAR:	plan_params[ index ] = Tools.NULL_VARCHAR;	break;
		default:			throw new SQLException( "unknown SQL type: " + sqlType );
		}
	}

	/*
	 * @see java.sql.PreparedStatement#setBlob(int, java.sql.Blob)
	 */
	@Override
	public void setBlob( int parameterIndex, Blob theBlob ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( theBlob == null )
		{
			plan_params[ index ] = Tools.NULL_BLOB;
		}
		else
		{
			plan_params[ index ] = Tools.T_BLOB;
			ep_params_objs[ parameterIndex - 1 ] = ( (org.inria.jdbc.Blob) theBlob ).getId();
		}
	}

	//////////////////////////////////////////////////////////
	/// Not implemented methods
	//////////////////////////////////////////////////////////

	///
	/// interface java.sql.Wrapper
	///

	/*
	 * @see java.sql.Wrapper#unwrap(java.lang.Class)
	 */
	@Override
	public <T> T unwrap( Class<T> iface ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)
	 */
	@Override
	public boolean isWrapperFor( Class<?> iface ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	///
	/// interface java.sql.Statement
	///

	/*
	 * @see java.sql.Statement#addBatch(java.lang.String)
	 */
	@Override
	public void addBatch( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#cancel()
	 */
	@Override
	public void cancel() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#clearBatch()
	 */
	@Override
	public void clearBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#clearWarnings()
	 */
	@Override
	public void clearWarnings() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#close()
	 */
	@Override
	public void close() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String)
	 */
	@Override
	public boolean execute( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, int)
	 */
	@Override
	public boolean execute( String sql, int autoGeneratedKeys ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, int[])
	 */
	@Override
	public boolean execute( String sql, int[] columnIndexes ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
	 */
	@Override
	public boolean execute( String sql, String[] columnNames ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeBatch()
	 */
	@Override
	public int[] executeBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeQuery(java.lang.String)
	 */
	@Override
	public ResultSet executeQuery( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String)
	 */
	@Override
	public int executeUpdate( String sql ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int)
	 */
	@Override
	public int executeUpdate( String sql, int autoGeneratedKeys ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
	 */
	@Override
	public int executeUpdate( String sql, int[] columnIndexes ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#executeUpdate(java.lang.String, java.lang.String[])
	 */
	@Override
	public int executeUpdate( String sql, String[] columnNames ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getFetchDirection()
	 */
	@Override
	public int getFetchDirection() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getFetchSize()
	 */
	@Override
	public int getFetchSize() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMaxFieldSize()
	 */
	@Override
	public int getMaxFieldSize() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMaxRows()
	 */
	@Override
	public int getMaxRows() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMoreResults()
	 */
	@Override
	public boolean getMoreResults() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getMoreResults(int)
	 */
	@Override
	public boolean getMoreResults( int current ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getQueryTimeout()
	 */
	@Override
	public int getQueryTimeout() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSet()
	 */
	@Override
	public ResultSet getResultSet() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetConcurrency()
	 */
	@Override
	public int getResultSetConcurrency() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetHoldability()
	 */
	@Override
	public int getResultSetHoldability() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getResultSetType()
	 */
	@Override
	public int getResultSetType() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getUpdateCount()
	 */
	@Override
	public int getUpdateCount() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#getWarnings()
	 */
	@Override
	public SQLWarning getWarnings() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setCursorName(java.lang.String)
	 */
	@Override
	public void setCursorName( String name ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setEscapeProcessing(boolean)
	 */
	@Override
	public void setEscapeProcessing( boolean enable ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setFetchDirection(int)
	 */
	@Override
	public void setFetchDirection( int direction ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setFetchSize(int)
	 */
	@Override
	public void setFetchSize( int rows ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setMaxFieldSize(int)
	 */
	@Override
	public void setMaxFieldSize( int max ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setMaxRows(int)
	 */
	@Override
	public void setMaxRows( int max ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setQueryTimeout(int)
	 */
	@Override
	public void setQueryTimeout( int seconds ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#isClosed()
	 */
	@Override
	public boolean isClosed() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#setPoolable(boolean)
	 */
	@Override
	public void setPoolable( boolean poolable ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.Statement#isPoolable()
	 */
	@Override
	public boolean isPoolable() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#addBatch()
	 */
	@Override
	public void addBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	///
	/// interface java.sql.PreparedStatement
	///

	/*
	 * @see java.sql.PreparedStatement#clearParameters()
	 */
	@Override
	public void clearParameters() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#execute()
	 */
	@Override
	public boolean execute() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#getMetaData()
	 */
	@Override
	public ResultSetMetaData getMetaData() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#getParameterMetaData()
	 */
	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setArray(int, java.sql.Array)
	 */
	@Override
	public void setArray( int parameterIndex, Array theArray ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream, int)
	 */
	@Override
	public void setAsciiStream( int parameterIndex, InputStream theInputStream, int length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBigDecimal(int, java.math.BigDecimal)
	 */
	@Override
	public void setBigDecimal( int parameterIndex, BigDecimal theBigDecimal ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream, int)
	 */
	@Override
	public void setBinaryStream( int parameterIndex, InputStream theInputStream, int length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBoolean(int, boolean)
	 */
	@Override
	public void setBoolean( int parameterIndex, boolean theBoolean ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setByte(int, byte)
	 */
	@Override
	public void setByte( int parameterIndex, byte theByte ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader, int)
	 */
	@Override
	public void setCharacterStream( int parameterIndex, Reader reader, int length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setClob(int, java.sql.Clob)
	 */
	@Override
	public void setClob( int parameterIndex, Clob theClob ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setDate(int, java.sql.Date, java.util.Calendar)
	 */
	@Override
	public void setDate( int parameterIndex, Date theDate, Calendar cal ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setDouble(int, double)
	 */
	@Override
	public void setDouble( int parameterIndex, double theDouble ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setFloat(int, float)
	 */
	@Override
	public void setFloat( int parameterIndex, float theFloat ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setLong(int, long)
	 */
	@Override
	public void setLong( int parameterIndex, long theLong ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNull(int, int, java.lang.String)
	 */
	@Override
	public void setNull( int paramIndex, int sqlType, String typeName ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setObject(int, java.lang.Object)
	 */
	@Override
	public void setObject( int parameterIndex, Object theObject ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setObject(int, java.lang.Object, int)
	 */
	@Override
	public void setObject( int parameterIndex, Object theObject, int targetSqlType ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setObject(int, java.lang.Object, int, int)
	 */
	@Override
	public void setObject( int parameterIndex, Object theObject, int targetSqlType, int scale ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setRef(int, java.sql.Ref)
	 */
	@Override
	public void setRef( int parameterIndex, Ref theRef ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setShort(int, short)
	 */
	@Override
	public void setShort( int parameterIndex, short theShort ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setTime(int, java.sql.Time)
	 */
	@Override
	public void setTime( int parameterIndex, Time theTime ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setTime(int, java.sql.Time, java.util.Calendar)
	 */
	@Override
	public void setTime( int parameterIndex, Time theTime, Calendar cal ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp)
	 */
	@Override
	public void setTimestamp( int parameterIndex, Timestamp theTimestamp ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp, java.util.Calendar)
	 */
	@Override
	public void setTimestamp( int parameterIndex, Timestamp theTimestamp, Calendar cal ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setUnicodeStream(int, java.io.InputStream, int)
	 */
	@Override
	public void setUnicodeStream( int parameterIndex, InputStream theInputStream, int length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setURL(int, java.net.URL)
	 */
	@Override
	public void setURL( int parameterIndex, URL theURL ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setRowId(int, java.sql.RowId)
	 */
	@Override
	public void setRowId( int parameterIndex, RowId theRowId ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNString(int, java.lang.String)
	 */
	@Override
	public void setNString( int parameterIndex, String theString ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNCharacterStream(int, java.io.Reader, long)
	 */
	@Override
	public void setNCharacterStream( int parameterIndex, Reader reader, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNClob(int, java.sql.NClob)
	 */
	@Override
	public void setNClob( int parameterIndex, NClob value ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setClob(int, java.io.Reader, long)
	 */
	@Override
	public void setClob( int parameterIndex, Reader reader, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBlob(int, java.io.InputStream, long)
	 */
	@Override
	public void setBlob( int parameterIndex, InputStream inputStream, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNClob(int, java.io.Reader, long)
	 */
	@Override
	public void setNClob( int parameterIndex, Reader reader, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setSQLXML(int, java.sql.SQLXML)
	 */
	@Override
	public void setSQLXML( int parameterIndex, SQLXML xmlObject ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream, long)
	 */
	@Override
	public void setAsciiStream( int parameterIndex, InputStream inputStream, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream, long)
	 */
	@Override
	public void setBinaryStream( int parameterIndex, InputStream inputStream, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader, long)
	 */
	@Override
	public void setCharacterStream( int parameterIndex, Reader reader, long length ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream)
	 */
	@Override
	public void setAsciiStream( int parameterIndex, InputStream inputStream ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream)
	 */
	@Override
	public void setBinaryStream( int parameterIndex, InputStream inputStream ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader)
	 */
	@Override
	public void setCharacterStream( int parameterIndex, Reader reader ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNCharacterStream(int, java.io.Reader)
	 */
	@Override
	public void setNCharacterStream( int parameterIndex, Reader reader ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setClob(int, java.io.Reader)
	 */
	@Override
	public void setClob( int parameterIndex, Reader reader ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setBlob(int, java.io.InputStream)
	 */
	@Override
	public void setBlob( int parameterIndex, InputStream inputStream ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	/*
	 * @see java.sql.PreparedStatement#setNClob(int, java.io.Reader)
	 */
	@Override
	public void setNClob( int parameterIndex, Reader reader ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}
}
